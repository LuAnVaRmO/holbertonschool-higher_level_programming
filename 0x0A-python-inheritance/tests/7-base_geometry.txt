==========================
The ''base_geometry' module
==========================

'''' Testing if the output is correct '''

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

>>> bg = BaseGeometry()

>>> bg.integer_validator("", 15)

>>> bg.integer_validator("Luis", 28)

>>> bg.integer_validator("Holberton", 98)

>>> type(bg)
<class '7-base_geometry.BaseGeometry'>

>>> bg.integer_validator("hello", "holberton")
Traceback (most recent call last):
...
TypeError: hello must be an integer

>>> bg.integer_validator("jhon", "wick")
Traceback (most recent call last):
...
TypeError: jhon must be an integer

>>> bg.integer_validator("strings", "345")
Traceback (most recent call last):
...
TypeError: strings must be an integer

>>> bg.integer_validator("number", 0)
Traceback (most recent call last):
...
ValueError: number must be greater than 0

>>> bg.integer_validator("n2", -5)
Traceback (most recent call last):
...
ValueError: n2 must be greater than 0

>>> bg.integer_validator("justone")
Traceback (most recent call last):
...
TypeError: integer_validator() missing 1 required positional argument: 'value'

>>> bg.integer_validator()
Traceback (most recent call last):
...
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

>>> bg.integer_validator("Dict", {"Name", "Luis"})
Traceback (most recent call last):
...
TypeError: Dict must be an integer

>>> bg.integer_validator("tuple", (1, 2))
Traceback (most recent call last):
...
TypeError: tuple must be an integer

>>> bg.integer_validator("nonevalue", None)
Traceback (most recent call last):
...
TypeError: nonevalue must be an integer

>>> bg.integer_validator("list", [1, 2])
Traceback (most recent call last):
...
TypeError: list must be an integer

>>> bg.area()
Traceback (most recent call last):
...
Exception: area() is not implemented

>>> dir(bg) == dir(BaseGeometry)
True